smg
//=========Player definition=======
player p1
planner,[r0],[end]
endplayer

player p2
environment,[n0rs0]
endplayer

//=========Resource Profiles=======
const int MXN=1;
const double app_rs=0.1261966194701128;
const double mx_rs=1.0; //set the max resource per slot

const int n0rs0_id = 0;
const double n0rs0_cost = 77.0;	//cost
const double n0rs0_avail = 0.8492755760259022;	//avail
const double n0rs0_rel = 0.9078889041137507;		//rel
const int n0rs0_time = 840;		//time
const double n0rs0_res = 0.3908490269249353;		//time


//=========Global Parameters=======
global t:[0..1] init 0;	//to control the turn
global goal : bool init false;	//(absorbing state)
global n:[-1..MXN] init -1;  //number of computing node

//=========Module for Player 1=======
module planner
//P1's coordinator :
[end] (t=0) & (goal=true) -> true; //to end the selection
//P1 moves :
[r0] (t=0) & (goal=false) -> (n'=0) & (t'=1);
endmodule

//=========Module for Player 2=======
module environment
//P2 moves for single or sequential pattern:
[n0rs0] (t=1) & (n=0) & (app_rs + n0rs0_res <= mx_rs) -> n0rs0_rel:(goal'=true) & (t'=0) + 1-n0rs0_rel:(goal'=false) & (t'=0);

endmodule

//=========Reward Structure=======
rewards "rw_cost"
[n0rs0] true : n0rs0_cost;
endrewards
rewards "rw_time"
[n0rs0] true : n0rs0_time;
endrewards
rewards "rw_reliability"
[n0rs0] true : n0rs0_rel;
endrewards
rewards "rw_availability"
[n0rs0] true : n0rs0_avail;
endrewards
//=========Labels=======
label "done" = (goal=true);
